<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:dubbo="http://code.alibabatech.com/schema/dubbo"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:security="http://www.springframework.org/schema/security"
       xmlns:secutity="http://www.springframework.org/schema/security"
       xmlns:securtity="http://www.springframework.org/schema/security"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                  http://www.springframework.org/schema/beans/spring-beans.xsd
                  http://www.springframework.org/schema/mvc
                  http://www.springframework.org/schema/mvc/spring-mvc.xsd
                  http://code.alibabatech.com/schema/dubbo
                  http://code.alibabatech.com/schema/dubbo/dubbo.xsd
                  http://www.springframework.org/schema/context
                  http://www.springframework.org/schema/context/spring-context.xsd
                          http://www.springframework.org/schema/security
                          http://www.springframework.org/schema/security/spring-security.xsd">

    <!--放行静态资源-->
    <security:http security="none" pattern="/js/**"/>
    <security:http security="none" pattern="/login.html"/>
    <securtity:global-method-security pre-post-annotations="enabled"/>
    <!--auto-config="true"开启自动配置，系统默认会有一个登录界面，需要开启-->
    <!--pattern连接所有地址-->
    <!--use-expressions开启表达式-->
    <security:http auto-config="true" use-expressions="true">
        <!--intercept-url拦截地址，pattern表示拦截/index.html这个地址，access有此权限的可通过-->
        <security:intercept-url pattern="/index.html" access="isAuthenticated()"/>
        <security:intercept-url pattern="/a.html" access="isAuthenticated()"/>

        <!--拥有add权限就可以访问b.html页面-->
        <security:intercept-url pattern="/b.html" access="hasAuthority('add')"/>

        <!--拥有ROLE_ADMIN角色就可以访问c.html页面，
            注意：此处虽然写的是ADMIN角色，框架会自动加上前缀ROLE_-->
        <security:intercept-url pattern="/c.html" access="hasRole('ROLE_ADMIN')"/>

        <!--拥有ROLE_ADMIN角色就可以访问d.html页面-->
        <security:intercept-url pattern="/d.html" access="hasRole('ABC')"/>
        <!--pattern拦截所有地址-->
        <!--access指定角色和权限-->
        <!--
  form-login：定义表单登录信息
            login-page="/login.html"：表示指定登录页面
            username-parameter="username"：使用登录名的名称，默认值是username
            password-parameter="password"：使用登录名的密码，默认值是password
            login-processing-url="/login.do"：表示登录的url地址
            default-target-url="/index.html"：登录成功后的url地址
            authentication-failure-url="/login.html"：认证失败后跳转的url地址，失败后指定/login.html
            always-use-default-target="true"：登录成功后，始终跳转到default-target-url指定的地址，即登录成功的默认地址
-->
        <security:intercept-url pattern="/**" access="hasRole('ROLE_ADMIN')"></security:intercept-url>
        <security:form-login

                login-page="/login.html"
                username-parameter="username"
                password-parameter="password"
                login-processing-url="/login.do"
                default-target-url="/index.html"
                authentication-failure-url="/login.html"
                always-use-default-target="true"></security:form-login>
        <security:csrf disabled="true"></security:csrf>
        <security:logout logout-url="/logout.do" logout-success-url="/login.html" invalidate-session="true"/>
    </security:http>

    <!--认证管理器-->
    <secutity:authentication-manager>
        <!--认证提供者-->
        <security:authentication-provider user-service-ref="userService">
            <!--使用密文登录，引入加载密码加载对象-->
            <security:password-encoder ref="passwordEncoder"/>
            <!--用户安全服务-->
            <!--<security:user-service>
                <security:user name="admin" authorities="ROLE_ADMIN" password="{noop}admin"/>
            </security:user-service>-->
        </security:authentication-provider>
    </secutity:authentication-manager>
    <!--开启注解扫描，此处主要是扫描-->
    <context:component-scan base-package="com.mellow"/>
    <!--开始基于注解的配置-->
    <mvc:annotation-driven></mvc:annotation-driven>
    <!--配置密码加密对象-->
    <bean id="passwordEncoder"
          class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"/>
</beans>